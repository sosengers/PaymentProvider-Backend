# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from paymentprovider.models.base_model_ import Model
from paymentprovider import util


class PaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount=None, description=None, payment_receiver=None):  # noqa: E501
        """PaymentRequest - a model defined in OpenAPI

        :param amount: The amount of this PaymentRequest.  # noqa: E501
        :type amount: float
        :param description: The description of this PaymentRequest.  # noqa: E501
        :type description: str
        :param payment_receiver: The payment_receiver of this PaymentRequest.  # noqa: E501
        :type payment_receiver: str
        """
        self.openapi_types = {
            'amount': float,
            'description': str,
            'payment_receiver': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'description': 'description',
            'payment_receiver': 'payment_receiver'
        }

        self._amount = amount
        self._description = description
        self._payment_receiver = payment_receiver

    @classmethod
    def from_dict(cls, dikt) -> 'PaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PaymentRequest of this PaymentRequest.  # noqa: E501
        :rtype: PaymentRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PaymentRequest.


        :return: The amount of this PaymentRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRequest.


        :param amount: The amount of this PaymentRequest.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this PaymentRequest.


        :return: The description of this PaymentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentRequest.


        :param description: The description of this PaymentRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def payment_receiver(self):
        """Gets the payment_receiver of this PaymentRequest.


        :return: The payment_receiver of this PaymentRequest.
        :rtype: str
        """
        return self._payment_receiver

    @payment_receiver.setter
    def payment_receiver(self, payment_receiver):
        """Sets the payment_receiver of this PaymentRequest.


        :param payment_receiver: The payment_receiver of this PaymentRequest.
        :type payment_receiver: str
        """
        if payment_receiver is None:
            raise ValueError("Invalid value for `payment_receiver`, must not be `None`")  # noqa: E501

        self._payment_receiver = payment_receiver
